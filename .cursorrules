# Cursor Rules — Noesis (DeepStream-first)

## 0) Intent
For all video pipeline work, do a **docs-first deep dive** into NVIDIA DeepStream before proposing solutions. Prefer **built-in elements/SDK patterns** over bespoke code when feasible.

## 1) Mandatory Preflight: DeepStream Docs Review
Before drafting any plan or code, do the following and include the outputs verbatim in your next message:

1) **Read & summarize (3–7 bullets total):**
   - DeepStream Overview: https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_Overview.html
   - DeepStream Developer Guide (TOC + the most relevant component pages): https://docs.nvidia.com/metropolis/deepstream/dev-guide/

2) **Identify built-ins** likely relevant (list by exact element name + 1‑line purpose):
   - Examples to consider: `nvurisrcbin`, `nvstreammux`, `nvinfer`, `nvtracker`, `nvdsanalytics`, `nvmultistreamtiler`, `nvmsgconv`, `nvmsgbroker`, `nvstreamdemux`, `nvvideoconvert`, `nvdsosd`.

3) **Surface sample references** (name and path/section link if available) that illustrate the needed pattern (e.g., analytics ROIs, tracker config, mux/tiler usage).

4) **Call out config keys** you will likely touch (e.g., batch-size, `interval`, tracker settings, analytics ROI/polygon definitions) and why.

## 2) Working Principles
- **Prefer SDK features** over custom plugins unless there’s a clear gap. If you propose custom code, first prove the gap and justify.
- **Make pipelines reproducible:** provide the full `gst-launch-1.0` (or `.txt`) and a short “how to run”.
- **Explicit acceptance criteria** (fps target, resolution, stability) → no scope creep; open a follow-up issue for nice‑to‑haves.
- **Telemetry (at a minimum):** log `fps`, `latency_ms`, `gpu.util` if available, per stage.

## 3) Required Deliverables (per task touching DeepStream)
- **Plan:** short outline + why chosen SDK pieces suffice.
- **Pipeline/configs:** runnable text + notes on key knobs changed.
- **Bench (quick):** fps + latency numbers vs. the target.
- **Docs touch:** README/USAGE delta with run steps & config knobs.

## 4) “Stop & Ask” Triggers
- Unclear acceptance criteria or unrealistic fps target.
- Version mismatch (DeepStream / TensorRT) that affects behavior.
- A built‑in exists but is being re‑implemented without rationale.

## 5) Handy Prompts (you may copy into chat)
- **`/docs-first`** – “Summarize relevant DeepStream pages, list built‑ins & samples, then propose.”
- **`/prefer-builtins`** – “Show me which SDK elements solve this before writing custom code.”
- **`/graphify`** – “Output a runnable pipeline config + `gst-launch-1.0` command and explain each stage.”
